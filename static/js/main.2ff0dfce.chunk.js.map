{"version":3,"sources":["components/AudioBox.js","components/common/AppHeader.js","components/AppContainer.js","components/Audio.js","components/start/Start.js","App.js","serviceWorker.js","index.js"],"names":["Mp3Recorder","MicRecorder","bitRate","AudioBox","props","start","state","isBlocked","console","log","then","setState","isRecording","catch","e","error","stop","getMp3","blob","blobToBinaryString","binaryString","webrtc","shout","onSend","err","toggleRecord","blobURL","navigator","getUserMedia","audio","type","block","icon","AudioOutlined","size","onClick","this","className","Component","withWebRTC","AppHeader","AppContainer","children","Date","getFullYear","href","target","Audio","join","channelId","joinRoom","handleAddAudio","binaryStringToBlob","handleCreatedPeer","peer","id","substring","handlePeerData","payload","match","params","options","autoRequestMedia","debug","dataOnly","onReady","onCreatedPeer","onReceivedPeerData","height","width","audioId","capColor","capHeight","meterWidth","meterCount","meterColor","color","gap","autoPlay","controls","src","Blob","URL","createObjectURL","withRouter","Text","Typography","Start","handleCreateNewChannel","history","push","uuidv4","handleJoin","input","current","value","React","createRef","PlusOutlined","name","onFinish","Item","rules","required","pattern","RegExp","message","min","max","placeholder","autoFocus","ref","htmlType","LoginOutlined","App","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ff0dfce.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withWebRTC } from 'react-liowebrtc';\r\nimport MicRecorder from 'mic-recorder-to-mp3';\r\nimport { blobToBinaryString } from 'blob-util';\r\nimport { AudioOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\n\r\nconst Mp3Recorder = new MicRecorder({ bitRate: 128 });\r\n\r\nclass AudioBox extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isRecording: false,\r\n            blobURL: '',\r\n            isBlocked: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        navigator.getUserMedia({ audio: true },\r\n            () => {\r\n                console.log('Permission Granted');\r\n                this.setState({ isBlocked: false });\r\n            },\r\n            () => {\r\n                console.log('Permission Denied');\r\n                this.setState({ isBlocked: true })\r\n            },\r\n        );\r\n    }\r\n\r\n    start = () => {\r\n        if (this.state.isBlocked) {\r\n            console.log('Permission Denied');\r\n        } else {\r\n            Mp3Recorder\r\n                .start()\r\n                .then(() => {\r\n                    this.setState({ isRecording: true });\r\n                }).catch((e) => console.error(e));\r\n        }\r\n    };\r\n\r\n    stop = () => {\r\n        Mp3Recorder\r\n            .stop()\r\n            .getMp3()\r\n            .then(([buffer, blob]) => {\r\n                console.log('sending1');\r\n                blobToBinaryString(blob).then((binaryString) => {\r\n                    this.props.webrtc.shout('chat', binaryString);\r\n                    this.props.onSend(binaryString);\r\n                    console.log('sending');\r\n                }).catch((err) => {\r\n                    // error\r\n                });\r\n                this.setState({ isRecording: false });\r\n            }).catch((e) => console.log(e));\r\n    };\r\n\r\n    toggleRecord = () => {\r\n        if (this.state.isRecording) {\r\n            this.stop();\r\n        } else {\r\n            this.start();\r\n        }\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <Button\r\n                type=\"primary\"\r\n                block={true}\r\n                icon={<AudioOutlined />}\r\n                size=\"large\"\r\n                onClick={this.toggleRecord}\r\n                className=\"audio-box__button\"\r\n            >\r\n                {this.state.isRecording ? 'Recording' : 'Record'}\r\n            </Button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withWebRTC(AudioBox);","import React, { Component } from 'react';\r\nimport { AudioOutlined } from '@ant-design/icons';\r\nimport '../../styles/AppHeader.css';\r\n\r\nclass AppHeader extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"app-header\">\r\n                <h1><AudioOutlined /> Intercom</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppHeader;","import React, { Component } from 'react';\r\nimport AppHeader from \"./common/AppHeader\";\r\nimport '../styles/AppContainer.css';\r\n\r\nclass AppContainer extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"app-container\">\r\n                    <div className=\"app-container__content\">\r\n                        <AppHeader />\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n                <div className=\"app-container__footer\">\r\n                    &copy; Intercom {(new Date()).getFullYear()} &middot; Creator <a href=\"https://twitter.com/strange_quirks\" target=\"_blank\">Philip Metzger</a>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppContainer;","import React, { Component } from 'react';\r\nimport AudioBox from \"./AudioBox\";\r\nimport {LioWebRTC} from \"react-liowebrtc\";\r\nimport AppContainer from \"./AppContainer\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport { binaryStringToBlob } from 'blob-util';\r\nimport AudioSpectrum from 'react-audio-spectrum';\r\nimport '../styles/Audio.css';\r\nimport { Card } from 'antd';\r\n\r\nclass Audio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            channelId: props.match.params.id,\r\n            blob: null,\r\n            options: {\r\n                autoRequestMedia: true,\r\n                debug: false,\r\n                dataOnly: true,\r\n            }\r\n        };\r\n    }\r\n\r\n    join = (webrtc) => {\r\n        if (this.state.channelId) {\r\n            webrtc.joinRoom(this.state.channelId);\r\n        }\r\n    };\r\n\r\n    handleAddAudio = (blob) => {\r\n        this.setState({\r\n            blob: blob ? binaryStringToBlob(blob, 'audio/mp3') : null,\r\n        });\r\n    };\r\n\r\n    handleCreatedPeer = (webrtc, peer) => {\r\n        console.log(`Peer-${peer.id.substring(0, 5)} joined the room!`);\r\n    };\r\n\r\n    handlePeerData = (webrtc, type, payload, peer) => {\r\n        console.log('handlePeerData', type, payload, peer);\r\n        switch(type) {\r\n            case 'chat':\r\n                this.handleAddAudio(payload);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <AppContainer>\r\n                <Card className=\"audio-container__card\">\r\n                    <LioWebRTC\r\n                        options={this.state.options}\r\n                        onReady={this.join}\r\n                        onCreatedPeer={this.handleCreatedPeer}\r\n                        onReceivedPeerData={this.handlePeerData}\r\n                    >\r\n                        <AudioBox\r\n                            onSend={(blob) => {\r\n                                console.log('blob', blob);\r\n                                if (blob) {\r\n                                    this.handleAddAudio(blob);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <AudioSpectrum\r\n                            id=\"audio-canvas\"\r\n                            height={260}\r\n                            width={360}\r\n                            audioId={'audio-element'}\r\n                            capColor={'red'}\r\n                            capHeight={2}\r\n                            meterWidth={2}\r\n                            meterCount={512}\r\n                            meterColor={[\r\n                                {stop: 0, color: '#f00'},\r\n                                {stop: 0.5, color: '#0CD7FD'},\r\n                                {stop: 1, color: 'red'}\r\n                            ]}\r\n                            gap={4}\r\n                        />\r\n                        <audio id=\"audio-element\" className=\"audio-element\" autoPlay={true} controls={true} src={this.state.blob instanceof Blob ? URL.createObjectURL(this.state.blob) : null}/>\r\n                    </LioWebRTC>\r\n                </Card>\r\n            </AppContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Audio);","import React, { Component } from 'react';\r\nimport { Card, Button, Divider, Typography, Form, Input } from 'antd';\r\nimport AppContainer from \"../AppContainer\";\r\nimport { PlusOutlined, LoginOutlined } from '@ant-design/icons';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { withRouter } from 'react-router-dom';\r\nimport '../../styles/Start.css';\r\n\r\nconst { Text } = Typography;\r\n\r\nclass Start extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.input = React.createRef();\r\n    }\r\n\r\n    handleCreateNewChannel = () => {\r\n        this.props.history.push(`/channel/${uuidv4()}`)\r\n    };\r\n\r\n    handleJoin = () => {\r\n        this.props.history.push(`/channel/${this.input.current.props.value}`);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <AppContainer>\r\n                <div className=\"start-container\">\r\n                    <Card className=\"start-container__card\">\r\n                        <div className=\"start-container__card-content\">\r\n                            <div className=\"start-container__card-top\">\r\n                                <Button type=\"primary\" block size=\"large\" icon={<PlusOutlined />} onClick={this.handleCreateNewChannel}>\r\n                                    Create new channel\r\n                                </Button>\r\n                            </div>\r\n                            <Divider className=\"start-container__card-divider\">\r\n                                <Text>Or, join existing channel</Text>\r\n                            </Divider>\r\n                            <div className=\"start-container__card-bottom\">\r\n                                <Form\r\n                                    className=\"start-container__form-join\"\r\n                                    name=\"id\"\r\n                                    onFinish={this.handleJoin}\r\n                                    size=\"large\"\r\n                                >\r\n                                    <Form.Item\r\n                                        name=\"channelId\"\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                type: \"regexp\",\r\n                                                pattern: new RegExp(\"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"),\r\n                                                message: 'Please enter a valid existing channel ID',\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input min={30} max={40} placeholder=\"Enter channel ID\" autoFocus={true} ref={this.input}/>\r\n                                    </Form.Item>\r\n                                    <Form.Item>\r\n                                        <Button type=\"primary\" htmlType=\"submit\" block size=\"large\" icon={<LoginOutlined />}>\r\n                                            Join\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </AppContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Start);","import React, { Component } from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport 'antd/dist/antd.css';\nimport Audio from \"./components/Audio\";\nimport Start from \"./components/start/Start\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <Start />\n                        </Route>\n                        <Route exact path=\"/channel/:id\">\n                            <Audio />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}